// @flow
import type {FileCreateInvalidation} from '@parcel/types';

export interface JsFileSystemOptions {
  canonicalize: (string) => string,
  read: (string) => Buffer,
  isFile: (string) => boolean,
  isDir: (string) => boolean,
  includeNodeModules?: boolean | Array<string> | {|[string]: boolean|}
}
export interface ResolverOptions {
  fs?: JsFileSystemOptions,
  includeNodeModules?: boolean | Array<string> | {|[string]: boolean|},
  conditions?: number,
  moduleDirResolver?: (...args: any[]) => any,
  mode: number,
  entries?: number,
  extensions?: Array<string>
}
export interface ResolveOptions {
  filename: string,
  specifierType: string,
  parent: string
}
export interface ResolveResult {
  resolution: Resolution,
  invalidateOnFileChange: Array<string>,
  invalidateOnFileCreate: Array<FileCreateInvalidation>,
  query?: string,
  sideEffects: boolean,
  error: mixed
}
export type Resolution =
  | {|type: 'path', value: string|}
  | {|type: 'builtin', value: string|}
  | {|type: 'external'|}
  | {|type: 'empty'|}
  | {|type: 'global', value: string|};
declare export class Resolver {
  constructor(projectRoot: string, options: ResolverOptions): Resolver,
  resolve(options: ResolveOptions): ResolveResult
}
